name: CI/CD â‡¢ Lambda Inference

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: mlops-demo-inference
  IMAGE_TAG: latest
  LAMBDA_FUNCTION: mlops-demo-inference
  LAMBDA_ROLE_ARN: arn:aws:iam::546358762446:role/mlops-inference-role
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  MLFLOW_MODEL_NAME: ChestMNIST_ResNet18

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: personal

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr describe-repositories \
            --repository-names $ECR_REPOSITORY \
            --region $AWS_REGION \
          || aws ecr create-repository \
               --repository-name $ECR_REPOSITORY \
               --region $AWS_REGION
          aws ecr get-login-password --region $AWS_REGION \
            | docker login \
                --username AWS \
                --password-stdin \
                ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          driver: docker-container

      - name: Download MLflow model artifact
        run: |
          python - <<EOF
import os, mlflow, shutil
mlflow.set_tracking_uri(os.environ['MLFLOW_TRACKING_URI'])
model_uri = f"models:/{os.environ['MLFLOW_MODEL_NAME']}/Production"
local_path = mlflow.artifacts.download_artifacts(model_uri)
if os.path.exists('model'): shutil.rmtree('model')
shutil.move(local_path, 'model')
EOF

      - name: Build & push Docker image with cache
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile.lambda
          push: true
          platforms: linux/amd64
          provenance: false
          sbom: false
          cache-from: type=gha,scope=${{ github.ref_name }}-mlops-demo
          cache-to:   type=gha,scope=${{ github.ref_name }}-mlops-demo,mode=max
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy (create or update) Lambda function
        run: |
          if aws lambda get-function --function-name $LAMBDA_FUNCTION --region $AWS_REGION; then
            aws lambda update-function-code \
              --function-name $LAMBDA_FUNCTION \
              --region $AWS_REGION \
              --image-uri ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          else
            aws lambda create-function \
              --function-name $LAMBDA_FUNCTION \
              --region $AWS_REGION \
              --package-type Image \
              --code ImageUri=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
              --role $LAMBDA_ROLE_ARN \
              --timeout 30 \
              --memory-size 512
          fi

      - name: Update Lambda environment variables
        run: |
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION \
            --region $AWS_REGION \
            --environment Variables="{MODEL_PATH=\"/opt/model\"}"
